/* SimpleXmlToJson.java */
/* Generated By:JavaCC: Do not edit this line. SimpleXmlToJson.java */
package projet2_compilation;

import java.io.*;
import java.util.*;

public class SimpleXmlToJson implements SimpleXmlToJsonConstants {

    public static void main(String[] args) throws ParseException, IOException {


        // Read and preprocess the XML file
        File xmlFile = new File("src/exemple.xml");
        if (!xmlFile.exists()) {
            System.out.println("File not found: ");
            return;
        }

        String cleanedXml = preprocessXmlFile(xmlFile);
        SimpleXmlToJson parser = new SimpleXmlToJson(new ByteArrayInputStream(cleanedXml.getBytes()));
        Map<String, Object> json = parser.parseXmlToJson();
        System.out.println("Converted JSON:");
        System.out.println(formatJson(json, 0));
    }

    // Preprocess XML file to remove unnecessary spaces and line breaks
    private static String preprocessXmlFile(File file) throws IOException {
        StringBuilder content = new StringBuilder();
        try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
            String line;
            while ((line = reader.readLine()) != null) {
                content.append(line.trim()); // Remove leading/trailing whitespace from each line
            }
        }
        return content.toString(); // Return cleaned XML as a single string
    }

    public static String formatJson(Map<String, Object> map, int indent) {
        StringBuilder sb = new StringBuilder();
        String indentation = "  ".repeat(indent);
        sb.append("{\n");
        for (Map.Entry<String, Object> entry : map.entrySet()) {
            sb.append(indentation).append("  \"").append(entry.getKey()).append("\": ");
            if (entry.getValue() instanceof Map) {
                sb.append(formatJson((Map<String, Object>) entry.getValue(), indent + 1));
            } else if (entry.getValue() instanceof List) {
                sb.append("[\n");
                for (Object item : (List<?>) entry.getValue()) {
                    if (item instanceof Map) {
                        sb.append(formatJson((Map<String, Object>) item, indent + 1)).append(",\n");
                    } else {
                        sb.append(indentation).append("  \"").append(item).append("\"").append(",\n");
                    }
                }
                if (sb.length() > 1) sb.setLength(sb.length() - 2); // Remove trailing comma and newline
                sb.append("\n").append(indentation).append("]");
            } else {
                sb.append("\"").append(entry.getValue()).append("\"");
            }
            sb.append(",\n");
        }
        if (sb.length() > 1) sb.setLength(sb.length() - 2); // Remove trailing comma and newline
        sb.append("\n").append(indentation).append("}");
        return sb.toString();
    }

// Main rule to parse XML to JSON
  static final public Map<String, Object> parseXmlToJson() throws ParseException {Map<String, Object> json = new HashMap<>();
    Token nameToken;
    Token closingToken;
    jj_consume_token(TAG_OPEN);
    nameToken = jj_consume_token(TEXT);
    jj_consume_token(TAG_CLOSE);
json.put(nameToken.image.trim(), parseContent());
    jj_consume_token(TAG_END);
    closingToken = jj_consume_token(TEXT);
    jj_consume_token(TAG_CLOSE);
if (!nameToken.image.trim().equals(closingToken.image.trim())) {
            {if (true) throw new ParseException("Mismatched closing tag: </" + closingToken.image + "> for <" + nameToken.image + ">");}
        }
{if ("" != null) return json;}
    throw new Error("Missing return statement in function");
}

// Rule to parse content within tags (handles text or nested elements)
  static final public Object parseContent() throws ParseException {Map<String, Object> nested = new HashMap<>();
    List<Object> list = null;
    Token contentToken;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TAG_OPEN:
      case TEXT:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TAG_OPEN:{
        jj_consume_token(TAG_OPEN);
        contentToken = jj_consume_token(TEXT);
        jj_consume_token(TAG_CLOSE);
Object child = parseContent();
                if (nested.containsKey(contentToken.image.trim())) {
                    if (list == null) {
                        list = new ArrayList<>();
                        list.add(nested.get(contentToken.image.trim()));
                        nested.put(contentToken.image.trim(), list);
                    }
                    list.add(child);
                } else {
                    nested.put(contentToken.image.trim(), child);
                }
        jj_consume_token(TAG_END);
        jj_consume_token(TEXT);
        jj_consume_token(TAG_CLOSE);
        break;
        }
      case TEXT:{
        contentToken = jj_consume_token(TEXT);
{if ("" != null) return contentToken.image.trim();}
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return nested.isEmpty() ? null : nested;}
    throw new Error("Missing return statement in function");
}

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public SimpleXmlToJsonTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[2];
  static private int[] jj_la1_0;
  static {
	   jj_la1_init_0();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x120,0x120,};
	}

  /** Constructor with InputStream. */
  public SimpleXmlToJson(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SimpleXmlToJson(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new SimpleXmlToJsonTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public SimpleXmlToJson(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new SimpleXmlToJsonTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new SimpleXmlToJsonTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public SimpleXmlToJson(SimpleXmlToJsonTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(SimpleXmlToJsonTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[9];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 2; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 9; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
